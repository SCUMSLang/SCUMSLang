typedef UInt8 byte;
typedef UInt32 int;
typedef String string;

typedef enum { false, true } Boolean;
typedef Boolean bool;

typedef enum { Module } Scopes;

/// <summary>Used by compiler! The function is intended to be used as attribute to mark an abstract function as attribute.</summary>
[Attribute]
function Attribute();

/// <summary>Used by compiler! The function is intended to be used as attribute to mark an abstract function as condition.</summary>
[Attribute]
function TriggerCondition();

/// <summary>Used by compiler! The function is intended to be used as attribute to mark an abstract function as only usable in specific scope(s).</summary>
[Attribute]
function ScopeAllowance(params Scopes[] allowedScopes);

/// <summary>
/// Declares a death counter of (an) unit(s) from the specified player being reservable by compiler.
/// Internally a death counter represents an UInt32 value which the compiler-specific triggers need.
/// </summary>
[ScopeAllowance(Scopes.Module)]
function add_uint32(Player PlayerId, params Unit[] units);